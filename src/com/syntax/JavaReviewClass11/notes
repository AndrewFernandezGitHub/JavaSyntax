Method overriding in Java:
    Method overriding happens when we have same method names with same signature(method name and
    its parameters are called signature of a method) in a parent class and in a child class

Benefits:
    1)Flexibility, With the help of method overriding child classes can provide its own implementations for methods
    that are present in the parent class
    Polymorphism:same method can behave differently depending upon the object we call it
Rules:
    1)There must be a parent child relationship between the classes.
    2)The method that we are trying to override must be present inside the child class with same name
    and parameters,
    3)If something don't participate in inheritance we can't override it for example private methods
    and constructors
    4)If a method is declared final inside the parent class we cant override that method inside the
    child class
    5)we can't override the static methods but we can redeclare them.For example the main method
    6)We cant change the access modifier to be more restrictive
    7)Method return type should be same

Method Overloading                  vs                   Method Overriding
Method signature should be different                                 Method signature should be same
Return type can be different                                         Return type should be same
We don't care about access modifiers                                  Access modifiers can't be more restrictive
we don't care about non-access modifiers (final static abstract)         We do care about about the non access modifiers
we can overload constructors                                            we can't override constructors
we achieve compile time polymorphism or static polymorphism or              run time polymorphism or dynamic binding or late binding
early binding

Polymorphism:
Polymorphism happens when an object behaves different.for example a method behave different when we pass different
parameters or when we call the method using different objects

Final keyword in Java
final keyword is non access modifier that can help restrict some features of OOPS
When we use it the class name no other clas can inherit from that class
When we use it with method names we can override those methods inside the child classes.
When we use it with fields we cant change their values in parent or child class but we can have the
same name fields inside the child class

Rules:
1)we cant use final and abstract together
2)Static and final can be used together

Abstraction:
is a process through which we hide the implementation details and show only the functionality to the user
for example if we have a method that calculates the tax of a salaried person the person who wants to caluculate
his tax don't need to understand all the details

Benefits:
    1)Clean code
    2)less complexity
    3)improves the maintainability of code

We can achieve abstraction in java using Abstract class and interfaces
A class declared with abstract keyword is called abstract class.

Rules:
    1)As soon as we have a method abstract that class must also be abstract
    2)Abstract methods don't have bodies inside the classes in which they are defined.
    3)A method can't be static and abstract at same time
    4)fields cant be abstract
    5)methods cant be private and abstract
    6)abstract keyword not allowed with constructors
    7)we can have concrete and abstract methods in an abstract class

Interfaces in Java:
are contracts that define how a method should be called and classes provide the implementation
for those methods

Rules:
    1)All the variables in an interface they are always public static and final
    2)No instance fields and therefore no constructors
    3)Methods in interfaces are always public abstract
    4)with interfaces we use the implements keyword
    5)we can have multiple inheritance in interfaces
    6)we can have static methods in interfaces
    7)interfaces can extend other interfaces





